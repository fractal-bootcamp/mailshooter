// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AdminUser {
  id      String  @id @default(cuid())
  email   String  @unique
  name    String
  clerkId String  @unique
  blasts  Blast[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Person {
  id    String @id @default(cuid())
  name  String
  email String @unique

  PersonsInMailingLists PersonsInMailingLists[]

  receivedMessages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MailingList {
  id                    String                  @id @default(cuid())
  name                  String
  PersonsInMailingLists PersonsInMailingLists[]
  MailingListInBlast    MailingListInBlast[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id          String @id @default(cuid())
  recipient   Person @relation(fields: [recipientId], references: [id])
  recipientId String

  content   String
  delivered Boolean  @default(false)
  sentTime  DateTime
  blast     Blast    @relation(fields: [blastId], references: [id])
  blastId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blast {
  id                 String               @id @default(cuid())
  name               String
  messagesSent       Message[]
  MailingListInBlast MailingListInBlast[]

  author   AdminUser @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonsInMailingLists {
  id            String      @id @default(cuid())
  person        Person      @relation(fields: [personId], references: [id])
  personId      String
  mailingList   MailingList @relation(fields: [mailingListId], references: [id])
  mailingListId String

  @@unique([personId, mailingListId])
}

model MailingListInBlast {
  id            String      @id @default(cuid())
  mailingList   MailingList @relation(fields: [mailingListId], references: [id])
  mailingListId String
  blast         Blast       @relation(fields: [blastId], references: [id])
  blastId       String

  @@unique([mailingListId, blastId])
}
